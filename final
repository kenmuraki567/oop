public abstract class Animal {
    private String name;
    private int power;
    private int age;
    public Animal(){
        this.name = "";
        this.power = 0;
        this.age = 0;
    }
    public Animal(String name, int power, int age){
        this.name = name;
        this.power = power;
        this.age = age;
    }
    public void setName(String name){
        this.name = name;
    }
    public String getName(){
        return name;
    }
    public void setPower(int power){
        this.power = power;
    }
    public int getPower(){
        return power;
    }
    public void setAge(int age){
        this.age = age;
    }
    public int getAge(){
        return age;
    }
    public boolean equals(Animal a){
        return name.equals(a.name) && age == a.age;
    }
    @Override
    public String toString(){
        return "Animal : name = "+name+", power = "+power+", age = "+age;
    }
    public abstract void eat(Food f);
}

public abstract class Bird extends Animal implements Flyable{
    public Bird(String name, int age){
        super(name, 150, age);
    }
    public abstract void wingAttack(Animal a);
}

public class Dog extends Animal{
    public Dog(String name, int age){
        super(name, 200, age);
    }
    @Override
    public void eat(Food f){
        setPower(getPower()+f.getPower());
    }
    public void kick(Animal a){
        a.setPower(a.getPower()-10);
    }
}

public interface Flyable {
    public abstract void fly();
}

public abstract class Food {
    protected String name;
    public Food(){
        name = "";
    }
    public void setName(String name){
        this.name = "";
    }
    public String getName(){
        return name;
    }
    public abstract int getPower();
}

public class Main {
 public static void main(String[] args) {
 Pigeous p1 = new Pigeous("Alex",8);
 Pigeous p2 = new Pigeous("John",6);
 System.out.println(p1);
 System.out.println(p2);
 p2.wingAttack(p1, 5);
 System.out.println(p1.toString());
 System.out.println(p2.toString());
 p1.fly();
 }
}
public class Meat extends Food{
    public Meat(){
        
    }
    @Override
    public int getPower() {
        return 50;
    }
}

public class Owner {
    protected final String name;
    protected Animal animal;
    public Owner(){
        name = "";
        animal = null;
    }
    public Owner(String name){
        this.name = name;
        this.animal = null;
    }
    public Owner(Animal animal){
        this.animal = animal;
        this.name = "";
    }
    public Owner(String name, Animal animal){
        this.name = name;
        this.animal = animal;
    }
    public String getName(){
        return name;        
    }
    public void setAnimal(Animal animal){
        this.animal = animal;
    }
    public Animal getAnimal(){
        return animal;
    }
    public void feedFood(Food f){
        animal.eat(f);
    }
    public String toString(){
        return"Owner : name = "+getName()+", Animal : name = "+animal.getName()+", power = "+animal.getPower()+", age = "+animal.getAge();
    }
    public void protectOwnerFrom(Animal a){
        if(animal instanceof Dog){
            ((Dog)animal).kick(a);
        }
        else if(animal instanceof Pigeous){
            ((Pigeous)animal).wingAttack(a);
        }
    }
}

public class Pigeous extends Bird{
    public Pigeous(){
        super("", 0);
    }
    public Pigeous(String name, int age) {
        super(name, age);
    }
    public void eat(Food f){
        setPower(getPower()+f.getPower()*2);
    }
    @Override
    public void wingAttack(Animal a) {
        a.setPower(a.getPower()-5);
    }
    public void wingAttack(Animal a, int times){
        for(int i=0;i<times;i++){
            a.setPower(getPower()-5);
        }
    }
    @Override
    public void fly() {
        System.out.println(super.getName()+" fly fly ....");
    }    
}
